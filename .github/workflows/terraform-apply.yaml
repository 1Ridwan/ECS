name: Terraform Apply and Deploy to ECS

#on:
 # workflow_run:
  #  workflows: ["Terraform Plan"]
   # branches: [main]
    #types:
     # - completed

on:
  workflow_dispatch:
   branches:
     - main
     
env:
  BUCKET_TF_STATE: "terraform-state-ridwan-ecs"
  AWS_REGION: "eu-west-2"
  ECR_REPOSITORY: "main-ecr"
  ECS_SERVICE: "web-app"
  ECS_CLUSTER: "ecs-main"
  ECS_TASK_DEFINITION: ".aws/task-definition.json" # path to Amazon ECS task definition
  CONTAINER_NAME: "app-container"

jobs:
  on-success:
    name: Check if Terraform plan was successful
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - run: echo 'The Terraform Plan workflow passed'

  terraform:
    name: Terraform Apply
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "eu-west-2"

      - name: Initialise Terraform
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
