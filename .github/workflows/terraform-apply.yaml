name: Terraform Apply and Deploy to ECS

on:
  workflow_run:
    workflows: ["Terraform Plan Pipeline"]
    types:
      - completed

# TODO: make these values not readable, use secrets
env:
  AWS_REGION: "eu-west-2"                  # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: "main-ecr"          # set this to your Amazon ECR repository name
  ECS_SERVICE: "web-app"                # set this to your Amazon ECS service name
  ECS_CLUSTER: "ecs-main"                # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: MY_ECS_TASK_DEFINITION # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: "app-container"          # set this to the name of the container in the
                                               # containerDefinitions section of your task definition 

jobs:
 terraform:
   name: "Terraform Infrastructure Change Management"
   runs-on: ubuntu-latest
   defaults:
     run:
       shell: bash
       # We keep Terraform files in the terraform directory.
       working-directory: ./terraform
 
   steps:
     - name: Checkout the repository to the runner
       uses: actions/checkout@v5
 
     - name: Setup Terraform with specified version on the runner
       uses: hashicorp/setup-terraform@v2
       with:
         terraform_version: 1.6.0

     - name: Terraform init
       id: init
       run: terraform init -backend-config="bucket=$BUCKET_TF_STATE"

     - name: Terraform Apply
       run: terraform apply -auto-approve -input=false



#      - name: Fill in the new image ID in the Amazon ECS task definition
 #       id: task-def
  #      uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
   #     with:
    #      task-definition: ${{ env.ECS_TASK_DEFINITION }}
     #     container-name: ${{ env.CONTAINER_NAME }}
      #    image: ${{ steps.build-image.outputs.image }}
#
 #     - name: Deploy Amazon ECS task definition
  #      uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
   #     with:
    #      task-definition: ${{ steps.task-def.outputs.task-definition }}
     #     service: ${{ env.ECS_SERVICE }}
      #    cluster: ${{ env.ECS_CLUSTER }}
       #   wait-for-service-stability: true