# Send errors to container stderr (visible in CloudWatch via awslogs)
error_log /dev/stderr info;

events {}

http {
  # ----- logging -----
  log_format combined '$remote_addr - $remote_user [$time_local] '
                      '"$request" $status $body_bytes_sent '
                      '"$http_referer" "$http_user_agent" "$http_x_forwarded_for"';

  log_format json_combined escape=json
      '{ "time":"$time_iso8601", '
      '"remote_addr":"$remote_addr", '
      '"request":"$request", '
      '"status":$status, '
      '"bytes_sent":$bytes_sent, '
      '"referer":"$http_referer", '
      '"user_agent":"$http_user_agent", '
      '"x_forwarded_for":"$http_x_forwarded_for", '
      '"upstream_addr":"$upstream_addr", '
      '"upstream_status":"$upstream_status", '
      '"request_time":$request_time, '
      '"upstream_response_time":"$upstream_response_time" }';

  # Choose one:
  access_log /dev/stdout combined;
  # access_log /dev/stdout json_combined;

  # ----- websocket helper -----
  map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
  }

  # ----- main server -----
  server {
    listen 80;

    # static (built by npm run build)
    location /dist/ {
      root /app;
      access_log off;
      expires 7d;
    }

    # health
    location = /healthz { return 200 "ok\n"; }

    # reverse proxy to Node on 3001 (WebSocket-friendly)
    location / {
      proxy_pass http://127.0.0.1:3001;
      proxy_http_version 1.1;

      # REQUIRED for WebSockets
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $connection_upgrade;

      # Forwarded headers
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;

      # Timeouts
      proxy_read_timeout  300s;
      proxy_connect_timeout 60s;
      proxy_send_timeout  60s;

      # Realtime / websocket friendly
      proxy_buffering off;
    }
  }
}
